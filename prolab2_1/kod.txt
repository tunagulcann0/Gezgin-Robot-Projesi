import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.MalformedURLException;

public class Main {
    public static void main(String[] args) throws MalformedURLException {
        ArayuzGiris girisEkrani = new ArayuzGiris();
        girisEkrani.setVisible(true);
        Problem1 p1 = new Problem1();
        Problem2 p2= new Problem2();
    }
}

import javax.swing.*;
import java.awt.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import java.net.URL;

public class Problem1 extends JFrame {
    static int[][] matris;
    static int sleeptime;
    static int col = 0;
    private JPanel panel;
    private JButton bitirButton;
    private JButton baslaButton;
    private JButton degistirButton;
    private final List<Integer> path = new ArrayList<Integer>();
    private String URLPath1 = new String("http://bilgisayar.kocaeli.edu.tr/prolab2/url1.txt");
    private String URLPath2 = new String("http://bilgisayar.kocaeli.edu.tr/prolab2/url2.txt");
    URL url= new URL(URLPath1);

    public Problem1() throws MalformedURLException {
        setTitle("Problem 1");
        setSize(900, 900);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        panel = new JPanel();
        panel.setLayout(new FlowLayout());
        degistirButton = new JButton("Değiştir");
        degistirButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if(URLPath1.equals("http://bilgisayar.kocaeli.edu.tr/prolab2/url1.txt")) {
                    URLPath1 = ("http://bilgisayar.kocaeli.edu.tr/prolab2/url2.txt");
                    try {
                        url= new URL(URLPath2);
                    } catch (MalformedURLException ex) {
                        throw new RuntimeException(ex);
                    }
                }
                else {
                    URLPath1 = ("http://bilgisayar.kocaeli.edu.tr/prolab2/url1.txt");
                    try {
                        url= new URL(URLPath1);
                    } catch (MalformedURLException ex) {
                        throw new RuntimeException(ex);
                    }
                }
                updateMatris();
                repaint();
            }
        });

        baslaButton = new JButton("Başla");
        baslaButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                Thread t = new Thread(new Runnable() {
                    public void run() {
                        sleeptime=300;
                        if (DepthFirst.traverse(matris, 0, 0, col)) {
                            System.out.println("Yol bulundu!");
                            int x = 0, y = 0;
                            path.add(x);
                            path.add(y);
                            while (x != col - 2 || y != col - 1) {
                                if (y + 1 < col && matris[x][y + 1] == 5) {
                                    y++;
                                } else if (x + 1 < col && matris[x + 1][y] == 5) {
                                    x++;
                                }
                                path.add(x);
                                path.add(y);
                                repaint();
                                try {
                                    Thread.sleep(sleeptime); // yavaşlama için
                                } catch (InterruptedException ex) {
                                    ex.printStackTrace();
                                }
                            }
                        } else {
                            System.out.println("Yol bulunamadı!");
                        }
                    }
                });
                t.start();
            }

        });
        bitirButton = new JButton("Bitir");
        bitirButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                sleeptime=0;
                if (!path.isEmpty()) {
                    int p = 0;
                    while (p < path.size() - 1) {
                        int x = path.get(p);
                        int y = path.get(p + 1);
                        matris[x][y] = 9;
                        p += 2;
                    }
                    path.clear();
                    try {
                        Thread.sleep(sleeptime); // yavaşlama için
                    } catch (InterruptedException ex) {
                        ex.printStackTrace();
                    }
                    repaint();

                }

            }
        });
        panel.add(baslaButton);
        panel.add(bitirButton);
        panel.add(degistirButton);
        add(panel, BorderLayout.SOUTH);
        updateMatris();
    }

    private void updateMatris() {
        Engel2 engel2 = new Engel2();
        Engel3 engel3 = new Engel3();
        col = 0;
        ArrayList<ArrayList<Integer>> numbersList = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new InputStreamReader(url.openConnection().getInputStream()))) {
            String line;
            while ((line = br.readLine()) != null) {
                col++;
                ArrayList<Integer> satır = new ArrayList<>();
                for (int i = 0; i < line.length(); i++) {
                    satır.add(Character.getNumericValue(line.charAt(i)));
                }
                numbersList.add(satır);
            }
            matris = new int[col][col];
            for (int i = 0; i < numbersList.size(); i++) {
                for (int j = 0; j < numbersList.get(i).size(); j++) {
                    matris[i][j] = numbersList.get(i).get(j);
                }
            }
            for (int i=0;i<col;i++){
                for (int j = 0; j < col; j++) {
                    if (matris[i][j] == 8) {
                        continue;
                    }
                    if (matris[i][j] == 9) {
                        continue;
                    }
                    if (matris[i][j]==2){
                        switch (engel2.engelsec()){
                            case 0:
                                break;
                                case 1:
                                engel2.engelturu5(matris,i,j);
                                break;
                            case 2:
                                engel2.engelturu6(matris,i,j);
                                break;
                            case 3:
                                engel2.engelturu7(matris,i,j);
                                break;
                            case 4:
                                engel2.engelturu8(matris,i,j);
                                break;
                        }

                    }
                    if (matris[i][j]==3){
                        switch (engel3.engelsec()) {
                            case 0:
                                break;
                            case 1:
                                engel3.engelturu4(matris, i, j);
                                break;
                            case 2:
                                engel3.engelturu5(matris, i, j);
                                break;
                            case 3:
                                engel3.engelturu6(matris, i, j);
                                break;
                            case 4:
                                engel3.engelturu7(matris, i, j);
                                break;
                        }
                    }
                }
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        numbersList.clear();
    }


    @Override
    public void paint(Graphics g) {
        super.paint(g);

        g.translate(50, 50);
        for (int i = 0; i < Problem1.col; i++) {
            for (int j = 0; j < Problem1.col; j++) {
                Color color = null;
                switch (Problem1.matris[i][j]) {
                    case 0:
                        color = Color.WHITE;
                        break;
                    case 1:
                        color = Color.BLACK;
                        break;
                    case 7:
                        color = Color.BLUE;
                        break;
                    case 8:
                        color = Color.RED;
                        break;
                    case 4:
                        color = Color.ORANGE;
                        break;
                    case 5:
                        color = Color.WHITE;
                        break;
                    case 9:
                        color = Color.GREEN;
                }
                g.setColor(color);
                g.fillRect(30 * j, 30 * i, 30, 30);
                g.setColor(Color.BLACK);
                g.drawRect(30 * j, 30 * i, 30, 30);
            }
        }

       for (int p = 0; p < path.size(); p += 2) {
            int pathX = path.get(p);
            int pathY = path.get(p + 1);
            g.setColor(Color.GREEN);
            g.fillRect(30 * pathY, 30 * pathX, 30, 30);
        }
    }
    }


import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class Problem2 extends JFrame {

    private JPanel panel; // labirenti göstermek için kullanılacak JPanel
    private JTextField rowField, colField; // kullanıcının matrisin boyutlarını gireceği JTextField nesneleri
    private int[][] maze; // labirentin matrisi
    private int rows, cols; // labirentin satır ve sütun sayısı
    private int startX, startY, endX, endY; // labirentin giriş ve çıkış koordinatları
    private final List<Integer> path = new ArrayList<Integer>();

    public Problem2() {
        super("Problem 2"); // JFrame başlığı

        // JFrame ayarları
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(900, 900);
        setLayout(new BorderLayout());
        setLocationRelativeTo(null);
        // Kullanıcının matris boyutlarını girebileceği JTextField nesneleri
        rowField = new JTextField("20", 5);
        colField = new JTextField("20", 5);
        JPanel controlPanel = new JPanel(new FlowLayout());
        controlPanel.add(new JLabel("Satır:"));
        controlPanel.add(rowField);
        controlPanel.add(new JLabel("Sütun:"));
        controlPanel.add(colField);

        // "Oluştur" düğmesi
        JButton createButton = new JButton("Oluştur");
        createButton.addActionListener(e -> {
            // Kullanıcının girdiği boyutlarda bir matris oluştur
            rows = Integer.parseInt(rowField.getText() ) ;
            cols = Integer.parseInt(colField.getText() ) ;
            maze = new int[rows][cols];
            startX = 0;
            startY = 0;
            endX = rows -1;
            endY = cols -1;
            // Rastgele labirent oluştur
            createMaze();
            // Labirenti göster
            showMaze();
        });
        controlPanel.add(createButton);

        // JFrame'e arayüz bileşenlerini ekle
        add(controlPanel, BorderLayout.NORTH);
        panel = new JPanel();
        add(panel, BorderLayout.CENTER);
    }

// Rastgele labirent oluşturmak için recursive backtracking algoritmasını
private void createMaze() {
    // labirentin tüm hücreleri 1 ile işaretlenir (duvar)
    for (int i = 0; i < rows-1; i++) {
        for (int j = 0; j < cols-1; j++) {
            maze[i][j] = 1;
        }
    }
    // labirentin giriş ve çıkış noktaları belirlenir
    maze[startX][startY] = 0;
    maze[endX][endY] = 0;
    // recursive backtracking algoritması kullanarak rastgele bir labirent oluşturulur
    createMazeRecursively(startX, startY);
    maze[cols-3][rows-3]=0;
    maze[cols-3][rows-2]=0;
    maze[cols-2][rows-3]=0;
    if (DepthFirst2.traverse(maze, startX, startY,rows)) {
        System.out.println("Yol bulundu!");

    } else {
        System.out.println("Yol bulunamadı!");
    }
}
    // recursive backtracking algoritması
    private void createMazeRecursively(int x, int y) {
        int[][] directions = {{0, -2}, {0, 2}, {-2, 0}, {2, 0}}; // ilerleme yönleri
        Random random = new Random();

        // yönleri rastgele karıştır
        for (int i = directions.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            int[] temp = directions[i];
            directions[i] = directions[j];
            directions[j] = temp;
        }

        // her yönde ilerle ve duvarları kırarak labirent oluştur
        for (int[] dir : directions) {
            int dx = x + dir[0];
            int dy = y + dir[1];

            // ilerleme alanı labirentin içinde mi kontrol et
            if (dx >= 0 && dx < rows && dy >= 0 && dy < cols && maze[dx][dy] == 1) {
                // duvarı kır
                maze[(dx + x) / 2][(dy + y) / 2] = 0;
                maze[dx][dy] = 0;

                // recursive olarak ilerle
                createMazeRecursively(dx, dy);
            }
        }
    }

    // labirenti JPanel'de göstermek için özel bir Component sınıfı
    private class MazeComponent extends JComponent {

        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);

            int cellSize = 20; // her hücrenin boyutu
            Graphics2D g2d = (Graphics2D) g;
            g2d.setStroke(new BasicStroke(30)); // kalınlık ayarlanır
            g2d.setColor(Color.BLACK);
            g2d.drawRect(0, 0, getWidth()-1, getHeight()-1);

            // labirenti çiz
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < cols; j++) {
                    Color color = null;
                    switch (maze[i][j]){
                        case 0:
                            color = Color.WHITE;
                            break;
                        case 1:
                            color = Color.BLACK;
                            break;
                        case 2 :
                            color = Color.MAGENTA;
                            break;
                        case 5:
                            color = Color.GREEN;
                            break;
                        case 6:
                            color= Color.ORANGE;
                            break;
                    }
                    g.setColor(color);
                    g.fillRect(cellSize*j,cellSize*i , cellSize, cellSize);

                }
            }

            // giriş ve çıkış noktalarını çiz
            g.setColor(Color.BLUE);
            g.fillRect(startY,startX, cellSize, cellSize);
            g.setColor(Color.RED);
            g.fillRect(endY*cellSize, endX*cellSize, cellSize, cellSize);

        }

        @Override
        public Dimension getPreferredSize() {
            return new Dimension(cols * 20, rows * 20); // JPanel boyutu hesapla
        }
    }

    // labirenti göster
    private void showMaze() {
        panel.removeAll(); // önceki labirenti sil
        panel.add(new MazeComponent()); // yeni labirent
    }

    // kullanıcının matris boyutlarını değiştirme işlemini gerçekleştirir
    private void resizeMaze() {
        try {
            // matris boyutları için kullanıcıdan girdi al
            int newRows = Integer.parseInt(rowField.getText());
            int newCols = Integer.parseInt(colField.getText());

            // yeni matrisi oluştur
            rows = newRows;
            cols = newCols;
            maze = new int[rows][cols];

            // yeni labirenti oluştur ve göster
            createMaze();
            showMaze();
        } catch (NumberFormatException ex) {
        }
    }

    }

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.MalformedURLException;

public class ArayuzGiris extends JFrame {
    public ArayuzGiris() {
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setTitle("Giriş Ekranı");
        setSize(400, 200);
        setLocationRelativeTo(null);
        JPanel panel = new JPanel();
        add(panel);
        panel.setLayout(null);
        JLabel baslikEtiketi = new JLabel("Maze Solver", SwingConstants.CENTER);
        baslikEtiketi.setBounds(100, 30, 200, 30);
        panel.add(baslikEtiketi);
        JButton problem1Buton = new JButton("Problem 1");
        problem1Buton.setBounds(50, 100, 120, 30);
        panel.add(problem1Buton);

        JButton problem2Buton = new JButton("Problem 2");
        problem2Buton.setBounds(230, 100, 120, 30);
        panel.add(problem2Buton);
        problem1Buton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                Problem1 p1 = null;
                try {
                    p1 = new Problem1();
                } catch (MalformedURLException ex) {
                    throw new RuntimeException(ex);
                }
                p1.setVisible(true);
                setVisible(false);
            }
        });
        problem2Buton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                Problem2 p2 = new Problem2();
                p2.setVisible(true);
                setVisible(false);
            }
        });
    }
}

import java.util.List;

public class DepthFirst {

    public static  boolean isValidSpot(int[][] matris, int x, int y,int boyut){
        if (x >= 0 && x < boyut && y >= 0 && y < boyut) {
            if (x == 0 && y == 0) {
                return true;
            }
            return matris[x][y] == 0;
        }
        return false;
    }

    public static boolean traverse(int[][] matris,int x,int y,int boyut){

        if (isValidSpot(matris,x,y,boyut)){
            if (boyut - 1 == x && y == boyut-1){
                return true;
            }
            int kontrol=0;
            matris[x][y] = 5;
            boolean returnValue = traverse(matris,x,y+1,boyut);
            if (!returnValue){
                returnValue = traverse(matris,x+1,y,boyut);
            }
            if (!returnValue){
                returnValue = traverse(matris,x,y-1,boyut);
            }
            if (!returnValue){
                returnValue = traverse(matris,x-1,y,boyut);
            }

            if (!returnValue){
                matris[x][y]=6;
            }
            return returnValue;
        }

        return false;
    }
}

import java.util.List;

public class DepthFirst2 {

    public static  boolean isValidSpot(int[][] matris, int x, int y,int boyut){
        if (x>=0 && x<boyut && y>=0 && y<boyut){
            return matris[x][y] == 0;
        }
        return false;
    }

    public static boolean traverse(int[][] matris,int x,int y,int boyut){


        if (isValidSpot(matris,x,y,boyut)){
            if (boyut - 1 == x && y == boyut-1){
                return true;
            }

            matris[x][y] = 5;
            boolean returnValue = traverse(matris, x, y + 1, boyut);
            if (!returnValue) {
                returnValue = traverse(matris, x - 1, y, boyut);
            }
            if (!returnValue){
                returnValue = traverse(matris,x+1,y,boyut);
            }
            if (!returnValue){
                returnValue = traverse(matris,x,y-1,boyut);
            }
            if (!returnValue){
                matris[x][y]=6;
            }
            return returnValue;
        }

        return false;
    }
}

import java.util.*;

public class Engel2 {
    Random random = new Random();
    public int engelsec(){
        int x=random.nextInt(0,5);
        return x;
    }
    public void engelturu5(int matris[][],int x,int y){
        matris[x][y]=7;
        matris[x+1][y]=0;
        matris[x][y+1]=7;
        matris[x+1][y+1]=0;
    }
    public void engelturu6(int matris[][],int x,int y){
        matris[x][y]=0;
        matris[x+1][y]=7;
        matris[x][y+1]=0;
        matris[x+1][y+1]=7;
    }

    public void engelturu7(int matris[][], int x, int y) {
        matris[x][y]=0;
        matris[x+1][y]=0;
        matris[x][y+1]=7;
        matris[x+1][y+1]=7;
    }
    public void engelturu8(int matris[][],int x,int y){
        matris[x][y]=7;
        matris[x+1][y]=7;
        matris[x][y+1]=0;
        matris[x+1][y+1]=0;
    }
}

import java.util.*;
public class Engel3 {
    Random random=new Random();
    public int engelsec(){
        int x= random.nextInt(0,5);
        return x;
    }
    public void engelturu4(int matris[][],int x,int y){
        matris[x][y]=8;
        matris[x][y+1]=8;
        matris[x][y+2]=0;
        matris[x+1][y]=8;
        matris[x+1][y+1]=8;
        matris[x+1][y+2]=0;
        matris[x+2][y]=8;
        matris[x+2][y+1]=8;
        matris[x+2][y+2]=0;
    }
    public void engelturu5(int matris[][],int x,int y){
        matris[x][y]=0;
        matris[x][y+1]=8;
        matris[x][y+2]=8;
        matris[x+1][y]=0;
        matris[x+1][y+1]=8;
        matris[x+1][y+2]=8;
        matris[x+2][y]=0;
        matris[x+2][y+1]=8;
        matris[x+2][y+2]=8;
    }
    public void engelturu6(int matris[][],int x,int y){
        matris[x][y]=0;
        matris[x][y+1]=0;
        matris[x][y+2]=0;
        matris[x+1][y]=8;
        matris[x+1][y+1]=8;
        matris[x+1][y+2]=8;
        matris[x+2][y]=8;
        matris[x+2][y+1]=8;
        matris[x+2][y+2]=8;
    }
    public void engelturu7(int matris[][],int x,int y){
        matris[x][y]=8;
        matris[x][y+1]=8;
        matris[x][y+2]=8;
        matris[x+1][y]=8;
        matris[x+1][y+1]=8;
        matris[x+1][y+2]=8;
        matris[x+2][y]=0;
        matris[x+2][y+1]=0;
        matris[x+2][y+2]=0;
    }
}

